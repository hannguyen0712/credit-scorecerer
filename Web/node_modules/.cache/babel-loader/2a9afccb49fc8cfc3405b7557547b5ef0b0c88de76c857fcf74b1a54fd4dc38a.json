{"ast":null,"code":"import { GoogleGenerativeAI } from '@google/generative-ai';\nclass GeminiService {\n  constructor() {\n    this.genAI = void 0;\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!apiKey) {\n      throw new Error('REACT_APP_GEMINI_API_KEY is not set in environment variables');\n    }\n    this.genAI = new GoogleGenerativeAI(apiKey);\n  }\n  async getPurchaseRecommendation(request, userCards) {\n    try {\n      console.log('GeminiService: Starting purchase consultation...');\n      console.log('Request:', request);\n      console.log('User cards:', userCards);\n      const model = this.genAI.getGenerativeModel({\n        model: 'gemini-2.5-flash'\n      });\n      console.log('Model initialized');\n      const prompt = this.buildConsultationPrompt(request, userCards);\n      console.log('Sending purchase consultation prompt to Gemini...');\n      const result = await model.generateContent(prompt);\n      console.log('Got result from Gemini');\n      const response = await result.response;\n      const text = response.text();\n      console.log('Response text:', text);\n      return this.parseAIResponse(text, userCards);\n    } catch (error) {\n      console.error('Error getting AI recommendation:', error);\n      console.error('Error details:', error);\n      throw new Error('Failed to get AI recommendation. Please try again.');\n    }\n  }\n  buildConsultationPrompt(request, userCards) {\n    const cardsInfo = userCards.map(card => `Card: ${card.name} (${card.issuer})\n- Credit Limit: $${card.creditLimit.toLocaleString()}\n- Current Balance: $${card.currentBalance.toLocaleString()}\n- Available Credit: $${card.availableCredit.toLocaleString()}\n- Interest Rate: ${card.interestRate}%\n- Minimum Payment: $${card.minimumPayment}\n- Rewards: ${card.rewards.type} at ${card.rewards.rate}% rate\n- Utilization: ${(card.currentBalance / card.creditLimit * 100).toFixed(1)}%\n- Due Date: ${card.dueDate}\n- Last Payment: ${card.lastPaymentDate || 'No recent payments'}\n- Last Payment Amount: ${card.lastPaymentAmount ? `$${card.lastPaymentAmount}` : 'N/A'}`).join('\\n\\n');\n    return `You are a direct, no-nonsense financial advisor helping with credit card purchase decisions. \n\nUser's Credit Cards with complete details:\n${cardsInfo}\n\nPurchase Details:\n- Amount: $${request.purchaseAmount}\n- Category: ${request.purchaseCategory}\n- Description: ${request.description}\n${request.preferredCard ? `- Preferred Card: ${request.preferredCard}` : ''}\n\nProvide a recommendation in the following JSON format with concrete, actionable guidance:\n{\n  \"recommendation\": {\n    \"recommendedCard\": \"Card name\",\n    \"reasoning\": \"Single paragraph with specific numbers, exact payment amounts, reward calculations, interest savings, credit score impact numbers, and concrete timeline recommendations. Be direct and practical.\",\n    \"creditImpact\": \"positive|neutral|negative\",\n    \"impactExplanation\": \"Specific percentage impact on credit score with exact numbers and timeline\"\n  },\n  \"alternatives\": [\n    {\n      \"cardId\": \"card-id\",\n      \"cardName\": \"Card name\",\n      \"pros\": [\"specific advantage with numbers\"],\n      \"cons\": [\"specific disadvantage with numbers\"]\n    }\n  ],\n  \"tips\": [\n    \"Concrete tip with specific numbers and actionable steps\",\n    \"Another concrete tip with exact amounts and timeline\"\n  ]\n}\n\nFocus on:\n- Specific utilization targets with exact percentages\n- Exact payment amounts and interest savings calculations\n- Reward optimization strategies with specific dollar amounts\n- Credit score impact numbers with concrete timeline\n- Payment due dates and cash flow optimization\n- Concrete timeline recommendations\n\nProvide practical, actionable advice with specific numbers and calculations.`;\n  }\n  parseAIResponse(responseText, userCards) {\n    try {\n      var _parsed$recommendatio, _parsed$recommendatio2, _parsed$recommendatio3, _parsed$recommendatio4, _parsed$alternatives;\n      // Extract JSON from the response\n      const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n      if (!jsonMatch) {\n        throw new Error('No JSON found in response');\n      }\n      const parsed = JSON.parse(jsonMatch[0]);\n\n      // Validate and map the response\n      return {\n        recommendation: {\n          recommendedCard: ((_parsed$recommendatio = parsed.recommendation) === null || _parsed$recommendatio === void 0 ? void 0 : _parsed$recommendatio.recommendedCard) || 'Unknown',\n          reasoning: ((_parsed$recommendatio2 = parsed.recommendation) === null || _parsed$recommendatio2 === void 0 ? void 0 : _parsed$recommendatio2.reasoning) || 'No reasoning provided',\n          creditImpact: ((_parsed$recommendatio3 = parsed.recommendation) === null || _parsed$recommendatio3 === void 0 ? void 0 : _parsed$recommendatio3.creditImpact) || 'neutral',\n          impactExplanation: ((_parsed$recommendatio4 = parsed.recommendation) === null || _parsed$recommendatio4 === void 0 ? void 0 : _parsed$recommendatio4.impactExplanation) || 'No impact explanation'\n        },\n        alternatives: ((_parsed$alternatives = parsed.alternatives) === null || _parsed$alternatives === void 0 ? void 0 : _parsed$alternatives.map(alt => ({\n          cardId: alt.cardId || '',\n          cardName: alt.cardName || 'Unknown Card',\n          pros: alt.pros || [],\n          cons: alt.cons || []\n        }))) || [],\n        tips: parsed.tips || []\n      };\n    } catch (error) {\n      var _userCards$;\n      console.error('Error parsing AI response:', error);\n      // Return a fallback response\n      return {\n        recommendation: {\n          recommendedCard: ((_userCards$ = userCards[0]) === null || _userCards$ === void 0 ? void 0 : _userCards$.name) || 'Unknown',\n          reasoning: 'Unable to parse AI response. Please try again.',\n          creditImpact: 'neutral',\n          impactExplanation: 'Unable to determine impact.'\n        },\n        alternatives: [],\n        tips: ['Consider your credit utilization when making purchases.', 'Pay off balances in full when possible.']\n      };\n    }\n  }\n  async getGeneralCreditAdvice(question, userCards) {\n    try {\n      console.log('GeminiService: Starting API call...');\n      console.log('Question:', question);\n      console.log('User cards:', userCards);\n      const model = this.genAI.getGenerativeModel({\n        model: 'gemini-2.5-flash'\n      });\n      console.log('Model initialized');\n      const cardsInfo = userCards.map(card => `${card.name}: $${card.currentBalance}/${card.creditLimit} (${(card.currentBalance / card.creditLimit * 100).toFixed(1)}% utilization)`).join(', ');\n      const prompt = `You are a financial advisor. The user has these credit cards: ${cardsInfo}\n\nUser question: ${question}\n\nProvide helpful, actionable advice about credit management, spending optimization, and credit score improvement. Keep your response concise and practical.`;\n      console.log('Sending prompt to Gemini...');\n      const result = await model.generateContent(prompt);\n      console.log('Got result from Gemini');\n      const response = await result.response;\n      const text = response.text();\n      console.log('Response text:', text);\n      return text;\n    } catch (error) {\n      console.error('Error getting general advice:', error);\n      console.error('Error details:', error);\n      return 'I apologize, but I encountered an error while processing your question. Please try again.';\n    }\n  }\n}\nexport default new GeminiService();","map":{"version":3,"names":["GoogleGenerativeAI","GeminiService","constructor","genAI","apiKey","process","env","REACT_APP_GEMINI_API_KEY","Error","getPurchaseRecommendation","request","userCards","console","log","model","getGenerativeModel","prompt","buildConsultationPrompt","result","generateContent","response","text","parseAIResponse","error","cardsInfo","map","card","name","issuer","creditLimit","toLocaleString","currentBalance","availableCredit","interestRate","minimumPayment","rewards","type","rate","toFixed","dueDate","lastPaymentDate","lastPaymentAmount","join","purchaseAmount","purchaseCategory","description","preferredCard","responseText","_parsed$recommendatio","_parsed$recommendatio2","_parsed$recommendatio3","_parsed$recommendatio4","_parsed$alternatives","jsonMatch","match","parsed","JSON","parse","recommendation","recommendedCard","reasoning","creditImpact","impactExplanation","alternatives","alt","cardId","cardName","pros","cons","tips","_userCards$","getGeneralCreditAdvice","question"],"sources":["/Users/hanngn/Documents/CreditScorecerer/credit-scorecerer/Web/src/services/GeminiService.ts"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai';\nimport { CreditCard, AIConsultationRequest, AIConsultationResponse } from '../types';\n\nclass GeminiService {\n  private genAI: GoogleGenerativeAI;\n\n  constructor() {\n    const apiKey = process.env.REACT_APP_GEMINI_API_KEY;\n    if (!apiKey) {\n      throw new Error('REACT_APP_GEMINI_API_KEY is not set in environment variables');\n    }\n    this.genAI = new GoogleGenerativeAI(apiKey);\n  }\n\n  async getPurchaseRecommendation(\n    request: AIConsultationRequest,\n    userCards: CreditCard[]\n  ): Promise<AIConsultationResponse> {\n    try {\n      console.log('GeminiService: Starting purchase consultation...');\n      console.log('Request:', request);\n      console.log('User cards:', userCards);\n      \n      const model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });\n      console.log('Model initialized');\n\n      const prompt = this.buildConsultationPrompt(request, userCards);\n      console.log('Sending purchase consultation prompt to Gemini...');\n      const result = await model.generateContent(prompt);\n      console.log('Got result from Gemini');\n      const response = await result.response;\n      const text = response.text();\n      console.log('Response text:', text);\n\n      return this.parseAIResponse(text, userCards);\n    } catch (error) {\n      console.error('Error getting AI recommendation:', error);\n      console.error('Error details:', error);\n      throw new Error('Failed to get AI recommendation. Please try again.');\n    }\n  }\n\n  private buildConsultationPrompt(request: AIConsultationRequest, userCards: CreditCard[]): string {\n    const cardsInfo = userCards.map(card => \n      `Card: ${card.name} (${card.issuer})\n- Credit Limit: $${card.creditLimit.toLocaleString()}\n- Current Balance: $${card.currentBalance.toLocaleString()}\n- Available Credit: $${card.availableCredit.toLocaleString()}\n- Interest Rate: ${card.interestRate}%\n- Minimum Payment: $${card.minimumPayment}\n- Rewards: ${card.rewards.type} at ${card.rewards.rate}% rate\n- Utilization: ${((card.currentBalance / card.creditLimit) * 100).toFixed(1)}%\n- Due Date: ${card.dueDate}\n- Last Payment: ${card.lastPaymentDate || 'No recent payments'}\n- Last Payment Amount: ${card.lastPaymentAmount ? `$${card.lastPaymentAmount}` : 'N/A'}`\n    ).join('\\n\\n');\n\n    return `You are a direct, no-nonsense financial advisor helping with credit card purchase decisions. \n\nUser's Credit Cards with complete details:\n${cardsInfo}\n\nPurchase Details:\n- Amount: $${request.purchaseAmount}\n- Category: ${request.purchaseCategory}\n- Description: ${request.description}\n${request.preferredCard ? `- Preferred Card: ${request.preferredCard}` : ''}\n\nProvide a recommendation in the following JSON format with concrete, actionable guidance:\n{\n  \"recommendation\": {\n    \"recommendedCard\": \"Card name\",\n    \"reasoning\": \"Single paragraph with specific numbers, exact payment amounts, reward calculations, interest savings, credit score impact numbers, and concrete timeline recommendations. Be direct and practical.\",\n    \"creditImpact\": \"positive|neutral|negative\",\n    \"impactExplanation\": \"Specific percentage impact on credit score with exact numbers and timeline\"\n  },\n  \"alternatives\": [\n    {\n      \"cardId\": \"card-id\",\n      \"cardName\": \"Card name\",\n      \"pros\": [\"specific advantage with numbers\"],\n      \"cons\": [\"specific disadvantage with numbers\"]\n    }\n  ],\n  \"tips\": [\n    \"Concrete tip with specific numbers and actionable steps\",\n    \"Another concrete tip with exact amounts and timeline\"\n  ]\n}\n\nFocus on:\n- Specific utilization targets with exact percentages\n- Exact payment amounts and interest savings calculations\n- Reward optimization strategies with specific dollar amounts\n- Credit score impact numbers with concrete timeline\n- Payment due dates and cash flow optimization\n- Concrete timeline recommendations\n\nProvide practical, actionable advice with specific numbers and calculations.`;\n  }\n\n  private parseAIResponse(responseText: string, userCards: CreditCard[]): AIConsultationResponse {\n    try {\n      // Extract JSON from the response\n      const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n      if (!jsonMatch) {\n        throw new Error('No JSON found in response');\n      }\n\n      const parsed = JSON.parse(jsonMatch[0]);\n      \n      // Validate and map the response\n      return {\n        recommendation: {\n          recommendedCard: parsed.recommendation?.recommendedCard || 'Unknown',\n          reasoning: parsed.recommendation?.reasoning || 'No reasoning provided',\n          creditImpact: parsed.recommendation?.creditImpact || 'neutral',\n          impactExplanation: parsed.recommendation?.impactExplanation || 'No impact explanation'\n        },\n        alternatives: parsed.alternatives?.map((alt: any) => ({\n          cardId: alt.cardId || '',\n          cardName: alt.cardName || 'Unknown Card',\n          pros: alt.pros || [],\n          cons: alt.cons || []\n        })) || [],\n        tips: parsed.tips || []\n      };\n    } catch (error) {\n      console.error('Error parsing AI response:', error);\n      // Return a fallback response\n      return {\n        recommendation: {\n          recommendedCard: userCards[0]?.name || 'Unknown',\n          reasoning: 'Unable to parse AI response. Please try again.',\n          creditImpact: 'neutral',\n          impactExplanation: 'Unable to determine impact.'\n        },\n        alternatives: [],\n        tips: ['Consider your credit utilization when making purchases.', 'Pay off balances in full when possible.']\n      };\n    }\n  }\n\n  async getGeneralCreditAdvice(question: string, userCards: CreditCard[]): Promise<string> {\n    try {\n      console.log('GeminiService: Starting API call...');\n      console.log('Question:', question);\n      console.log('User cards:', userCards);\n      \n      const model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });\n      console.log('Model initialized');\n\n      const cardsInfo = userCards.map(card => \n        `${card.name}: $${card.currentBalance}/${card.creditLimit} (${((card.currentBalance / card.creditLimit) * 100).toFixed(1)}% utilization)`\n      ).join(', ');\n\n      const prompt = `You are a financial advisor. The user has these credit cards: ${cardsInfo}\n\nUser question: ${question}\n\nProvide helpful, actionable advice about credit management, spending optimization, and credit score improvement. Keep your response concise and practical.`;\n\n      console.log('Sending prompt to Gemini...');\n      const result = await model.generateContent(prompt);\n      console.log('Got result from Gemini');\n      const response = await result.response;\n      const text = response.text();\n      console.log('Response text:', text);\n      return text;\n    } catch (error) {\n      console.error('Error getting general advice:', error);\n      console.error('Error details:', error);\n      return 'I apologize, but I encountered an error while processing your question. Please try again.';\n    }\n  }\n}\n\nexport default new GeminiService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}