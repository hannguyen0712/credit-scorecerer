{"ast":null,"code":"// import { supabase } from '../config/supabase';\n\nclass AuthService {\n  constructor() {\n    this.STORAGE_KEY = 'credit_scorecerer_auth';\n    // Fallback mock user database\n    this.mockUsers = [{\n      id: '1',\n      email: 'demo@example.com',\n      name: 'Demo User',\n      createdAt: '2024-01-01T00:00:00Z'\n    }];\n  }\n  // Check if Supabase is configured (disabled for now)\n  get isSupabaseConfigured() {\n    return false; // Force demo mode\n    // return !!(process.env.REACT_APP_SUPABASE_URL && process.env.REACT_APP_SUPABASE_ANON_KEY);\n  }\n\n  async signUp(request) {\n    // Validate input\n    if (!request.name || !request.email || !request.password) {\n      throw new Error('All fields are required');\n    }\n    if (request.password.length < 6) {\n      throw new Error('Password must be at least 6 characters');\n    }\n    if (!this.isValidEmail(request.email)) {\n      throw new Error('Please enter a valid email address');\n    }\n\n    // Supabase integration disabled for now - using demo mode\n    /*\n    if (this.isSupabaseConfigured) {\n      try {\n        // Use Supabase Auth\n        const { data: authData, error: authError } = await supabase.auth.signUp({\n          email: request.email,\n          password: request.password,\n          options: {\n            data: {\n              name: request.name\n            }\n          }\n        });\n         if (authError) {\n          throw new Error(authError.message);\n        }\n         if (!authData.user) {\n          throw new Error('Failed to create user account');\n        }\n         // Create user profile in our custom users table\n        const { error: profileError } = await supabase\n          .from('users')\n          .insert({\n            id: authData.user.id,\n            email: request.email,\n            name: request.name\n          });\n         if (profileError) {\n          console.error('Error creating user profile:', profileError);\n          // Don't throw error here as the auth user was created successfully\n        }\n         const user: AuthUser = {\n          id: authData.user.id,\n          email: request.email,\n          name: request.name,\n          createdAt: authData.user.created_at\n        };\n         const response: AuthResponse = {\n          user,\n          token: authData.session?.access_token || ''\n        };\n         return response;\n      } catch (error) {\n        console.error('Supabase signup error:', error);\n        throw error;\n      }\n    } else {\n    */\n    // Using mock implementation (demo mode)\n    console.log('Using demo authentication mode');\n    return this.mockSignUp(request);\n    // }\n  }\n  async login(request) {\n    // Validate input\n    if (!request.email || !request.password) {\n      throw new Error('Email and password are required');\n    }\n    if (this.isSupabaseConfigured) {\n      try {\n        // Use Supabase Auth\n        const {\n          data: authData,\n          error: authError\n        } = await supabase.auth.signInWithPassword({\n          email: request.email,\n          password: request.password\n        });\n        if (authError) {\n          throw new Error(authError.message);\n        }\n        if (!authData.user || !authData.session) {\n          throw new Error('Invalid email or password');\n        }\n\n        // Get user profile from our custom users table\n        const {\n          data: userProfile,\n          error: profileError\n        } = await supabase.from('users').select('*').eq('id', authData.user.id).single();\n        if (profileError) {\n          var _authData$user$user_m;\n          console.error('Error fetching user profile:', profileError);\n          // Use auth user data as fallback\n          const user = {\n            id: authData.user.id,\n            email: authData.user.email || '',\n            name: ((_authData$user$user_m = authData.user.user_metadata) === null || _authData$user$user_m === void 0 ? void 0 : _authData$user$user_m.name) || 'User',\n            createdAt: authData.user.created_at\n          };\n          return {\n            user,\n            token: authData.session.access_token\n          };\n        }\n        const user = {\n          id: userProfile.id,\n          email: userProfile.email,\n          name: userProfile.name,\n          createdAt: userProfile.created_at\n        };\n        const response = {\n          user,\n          token: authData.session.access_token\n        };\n        return response;\n      } catch (error) {\n        console.error('Supabase login error:', error);\n        throw error;\n      }\n    } else {\n      // Fallback to mock implementation\n      console.warn('Supabase not configured, using mock authentication');\n      return this.mockLogin(request);\n    }\n  }\n  async logout() {\n    if (this.isSupabaseConfigured) {\n      try {\n        // Use Supabase Auth logout\n        const {\n          error\n        } = await supabase.auth.signOut();\n        if (error) {\n          console.error('Supabase logout error:', error);\n        }\n      } catch (error) {\n        console.error('Supabase logout error:', error);\n      }\n    } else {\n      // Fallback to mock implementation\n      console.warn('Supabase not configured, using mock authentication');\n      await new Promise(resolve => setTimeout(resolve, 500));\n    }\n  }\n  async getCurrentUser() {\n    if (this.isSupabaseConfigured) {\n      try {\n        // Get current session from Supabase\n        const {\n          data: {\n            session\n          },\n          error\n        } = await supabase.auth.getSession();\n        if (error) {\n          console.error('Error getting session:', error);\n          return null;\n        }\n        if (!(session !== null && session !== void 0 && session.user)) {\n          return null;\n        }\n\n        // Get user profile from our custom users table\n        const {\n          data: userProfile,\n          error: profileError\n        } = await supabase.from('users').select('*').eq('id', session.user.id).single();\n        if (profileError) {\n          var _session$user$user_me;\n          console.error('Error fetching user profile:', profileError);\n          // Use auth user data as fallback\n          return {\n            id: session.user.id,\n            email: session.user.email || '',\n            name: ((_session$user$user_me = session.user.user_metadata) === null || _session$user$user_me === void 0 ? void 0 : _session$user$user_me.name) || 'User',\n            createdAt: session.user.created_at\n          };\n        }\n        return {\n          id: userProfile.id,\n          email: userProfile.email,\n          name: userProfile.name,\n          createdAt: userProfile.created_at\n        };\n      } catch (error) {\n        console.error('Supabase getCurrentUser error:', error);\n        return null;\n      }\n    } else {\n      // Fallback to mock implementation\n      console.warn('Supabase not configured, using mock authentication');\n      return this.mockGetCurrentUser();\n    }\n  }\n  async refreshToken() {\n    if (this.isSupabaseConfigured) {\n      try {\n        // Supabase handles token refresh automatically\n        const {\n          data: {\n            session\n          },\n          error\n        } = await supabase.auth.getSession();\n        if (error || !session) {\n          return null;\n        }\n        return session.access_token;\n      } catch (error) {\n        console.error('Supabase refreshToken error:', error);\n        return null;\n      }\n    } else {\n      // Fallback to mock implementation\n      console.warn('Supabase not configured, using mock authentication');\n      return this.mockRefreshToken();\n    }\n  }\n\n  // Mock fallback methods\n  async mockSignUp(request) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Check if user already exists\n    const existingUser = this.mockUsers.find(user => user.email === request.email);\n    if (existingUser) {\n      throw new Error('User with this email already exists');\n    }\n\n    // Create new user\n    const newUser = {\n      id: (this.mockUsers.length + 1).toString(),\n      email: request.email,\n      name: request.name,\n      createdAt: new Date().toISOString()\n    };\n\n    // Add to mock database\n    this.mockUsers.push(newUser);\n\n    // Generate mock token\n    const token = this.generateMockToken(newUser.id);\n    return {\n      user: newUser,\n      token\n    };\n  }\n  async mockLogin(request) {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // For demo purposes, accept any password for demo@example.com\n    if (request.email === 'demo@example.com') {\n      const user = this.mockUsers.find(u => u.email === request.email);\n      if (!user) {\n        throw new Error('User not found');\n      }\n      const token = this.generateMockToken(user.id);\n      return {\n        user,\n        token\n      };\n    }\n\n    // Find user in mock database\n    const user = this.mockUsers.find(u => u.email === request.email);\n    if (!user) {\n      throw new Error('Invalid email or password');\n    }\n\n    // In a real app, you would verify the password hash here\n    // For demo purposes, we'll accept any password\n    const token = this.generateMockToken(user.id);\n    return {\n      user,\n      token\n    };\n  }\n  async mockGetCurrentUser() {\n    await new Promise(resolve => setTimeout(resolve, 300));\n\n    // Return demo user for mock mode\n    return this.mockUsers[0];\n  }\n  async mockRefreshToken() {\n    const currentUser = await this.mockGetCurrentUser();\n    if (!currentUser) {\n      return null;\n    }\n    return this.generateMockToken(currentUser.id);\n  }\n  generateMockToken(userId) {\n    // In a real app, this would be generated by the server\n    const payload = {\n      userId,\n      iat: Math.floor(Date.now() / 1000),\n      exp: Math.floor(Date.now() / 1000) + 24 * 60 * 60 // 24 hours\n    };\n    return btoa(JSON.stringify(payload));\n  }\n  isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  // Get auth data from localStorage (synchronous)\n  getStoredAuth() {\n    const stored = localStorage.getItem(this.STORAGE_KEY);\n    if (!stored) {\n      return null;\n    }\n    try {\n      return JSON.parse(stored);\n    } catch (error) {\n      console.error('Error parsing stored auth data:', error);\n      return null;\n    }\n  }\n  storeAuth(authData) {\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(authData));\n  }\n  clearAuth() {\n    localStorage.removeItem(this.STORAGE_KEY);\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["AuthService","constructor","STORAGE_KEY","mockUsers","id","email","name","createdAt","isSupabaseConfigured","signUp","request","password","Error","length","isValidEmail","console","log","mockSignUp","login","data","authData","error","authError","supabase","auth","signInWithPassword","message","user","session","userProfile","profileError","from","select","eq","single","_authData$user$user_m","user_metadata","created_at","token","access_token","response","warn","mockLogin","logout","signOut","Promise","resolve","setTimeout","getCurrentUser","getSession","_session$user$user_me","mockGetCurrentUser","refreshToken","mockRefreshToken","existingUser","find","newUser","toString","Date","toISOString","push","generateMockToken","u","currentUser","userId","payload","iat","Math","floor","now","exp","btoa","JSON","stringify","emailRegex","test","getStoredAuth","stored","localStorage","getItem","parse","storeAuth","setItem","clearAuth","removeItem"],"sources":["/Users/hanngn/Documents/CreditScorecerer/credit-scorecerer/Web/src/services/AuthService.ts"],"sourcesContent":["import { AuthUser, LoginRequest, SignUpRequest, AuthResponse } from '../types';\n// import { supabase } from '../config/supabase';\n\nclass AuthService {\n  private readonly STORAGE_KEY = 'credit_scorecerer_auth';\n\n  // Check if Supabase is configured (disabled for now)\n  private get isSupabaseConfigured(): boolean {\n    return false; // Force demo mode\n    // return !!(process.env.REACT_APP_SUPABASE_URL && process.env.REACT_APP_SUPABASE_ANON_KEY);\n  }\n\n  // Fallback mock user database\n  private mockUsers: AuthUser[] = [\n    {\n      id: '1',\n      email: 'demo@example.com',\n      name: 'Demo User',\n      createdAt: '2024-01-01T00:00:00Z'\n    }\n  ];\n\n  async signUp(request: SignUpRequest): Promise<AuthResponse> {\n    // Validate input\n    if (!request.name || !request.email || !request.password) {\n      throw new Error('All fields are required');\n    }\n\n    if (request.password.length < 6) {\n      throw new Error('Password must be at least 6 characters');\n    }\n\n    if (!this.isValidEmail(request.email)) {\n      throw new Error('Please enter a valid email address');\n    }\n\n    // Supabase integration disabled for now - using demo mode\n    /*\n    if (this.isSupabaseConfigured) {\n      try {\n        // Use Supabase Auth\n        const { data: authData, error: authError } = await supabase.auth.signUp({\n          email: request.email,\n          password: request.password,\n          options: {\n            data: {\n              name: request.name\n            }\n          }\n        });\n\n        if (authError) {\n          throw new Error(authError.message);\n        }\n\n        if (!authData.user) {\n          throw new Error('Failed to create user account');\n        }\n\n        // Create user profile in our custom users table\n        const { error: profileError } = await supabase\n          .from('users')\n          .insert({\n            id: authData.user.id,\n            email: request.email,\n            name: request.name\n          });\n\n        if (profileError) {\n          console.error('Error creating user profile:', profileError);\n          // Don't throw error here as the auth user was created successfully\n        }\n\n        const user: AuthUser = {\n          id: authData.user.id,\n          email: request.email,\n          name: request.name,\n          createdAt: authData.user.created_at\n        };\n\n        const response: AuthResponse = {\n          user,\n          token: authData.session?.access_token || ''\n        };\n\n        return response;\n      } catch (error) {\n        console.error('Supabase signup error:', error);\n        throw error;\n      }\n    } else {\n    */\n      // Using mock implementation (demo mode)\n      console.log('Using demo authentication mode');\n      return this.mockSignUp(request);\n    // }\n  }\n\n  async login(request: LoginRequest): Promise<AuthResponse> {\n    // Validate input\n    if (!request.email || !request.password) {\n      throw new Error('Email and password are required');\n    }\n\n    if (this.isSupabaseConfigured) {\n      try {\n        // Use Supabase Auth\n        const { data: authData, error: authError } = await supabase.auth.signInWithPassword({\n          email: request.email,\n          password: request.password\n        });\n\n        if (authError) {\n          throw new Error(authError.message);\n        }\n\n        if (!authData.user || !authData.session) {\n          throw new Error('Invalid email or password');\n        }\n\n        // Get user profile from our custom users table\n        const { data: userProfile, error: profileError } = await supabase\n          .from('users')\n          .select('*')\n          .eq('id', authData.user.id)\n          .single();\n\n        if (profileError) {\n          console.error('Error fetching user profile:', profileError);\n          // Use auth user data as fallback\n          const user: AuthUser = {\n            id: authData.user.id,\n            email: authData.user.email || '',\n            name: authData.user.user_metadata?.name || 'User',\n            createdAt: authData.user.created_at\n          };\n\n          return {\n            user,\n            token: authData.session.access_token\n          };\n        }\n\n        const user: AuthUser = {\n          id: userProfile.id,\n          email: userProfile.email,\n          name: userProfile.name,\n          createdAt: userProfile.created_at\n        };\n\n        const response: AuthResponse = {\n          user,\n          token: authData.session.access_token\n        };\n\n        return response;\n      } catch (error) {\n        console.error('Supabase login error:', error);\n        throw error;\n      }\n    } else {\n      // Fallback to mock implementation\n      console.warn('Supabase not configured, using mock authentication');\n      return this.mockLogin(request);\n    }\n  }\n\n  async logout(): Promise<void> {\n    if (this.isSupabaseConfigured) {\n      try {\n        // Use Supabase Auth logout\n        const { error } = await supabase.auth.signOut();\n        if (error) {\n          console.error('Supabase logout error:', error);\n        }\n      } catch (error) {\n        console.error('Supabase logout error:', error);\n      }\n    } else {\n      // Fallback to mock implementation\n      console.warn('Supabase not configured, using mock authentication');\n      await new Promise(resolve => setTimeout(resolve, 500));\n    }\n  }\n\n  async getCurrentUser(): Promise<AuthUser | null> {\n    if (this.isSupabaseConfigured) {\n      try {\n        // Get current session from Supabase\n        const { data: { session }, error } = await supabase.auth.getSession();\n        \n        if (error) {\n          console.error('Error getting session:', error);\n          return null;\n        }\n\n        if (!session?.user) {\n          return null;\n        }\n\n        // Get user profile from our custom users table\n        const { data: userProfile, error: profileError } = await supabase\n          .from('users')\n          .select('*')\n          .eq('id', session.user.id)\n          .single();\n\n        if (profileError) {\n          console.error('Error fetching user profile:', profileError);\n          // Use auth user data as fallback\n          return {\n            id: session.user.id,\n            email: session.user.email || '',\n            name: session.user.user_metadata?.name || 'User',\n            createdAt: session.user.created_at\n          };\n        }\n\n        return {\n          id: userProfile.id,\n          email: userProfile.email,\n          name: userProfile.name,\n          createdAt: userProfile.created_at\n        };\n      } catch (error) {\n        console.error('Supabase getCurrentUser error:', error);\n        return null;\n      }\n    } else {\n      // Fallback to mock implementation\n      console.warn('Supabase not configured, using mock authentication');\n      return this.mockGetCurrentUser();\n    }\n  }\n\n  async refreshToken(): Promise<string | null> {\n    if (this.isSupabaseConfigured) {\n      try {\n        // Supabase handles token refresh automatically\n        const { data: { session }, error } = await supabase.auth.getSession();\n        \n        if (error || !session) {\n          return null;\n        }\n\n        return session.access_token;\n      } catch (error) {\n        console.error('Supabase refreshToken error:', error);\n        return null;\n      }\n    } else {\n      // Fallback to mock implementation\n      console.warn('Supabase not configured, using mock authentication');\n      return this.mockRefreshToken();\n    }\n  }\n\n  // Mock fallback methods\n  private async mockSignUp(request: SignUpRequest): Promise<AuthResponse> {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Check if user already exists\n    const existingUser = this.mockUsers.find(user => user.email === request.email);\n    if (existingUser) {\n      throw new Error('User with this email already exists');\n    }\n\n    // Create new user\n    const newUser: AuthUser = {\n      id: (this.mockUsers.length + 1).toString(),\n      email: request.email,\n      name: request.name,\n      createdAt: new Date().toISOString()\n    };\n\n    // Add to mock database\n    this.mockUsers.push(newUser);\n\n    // Generate mock token\n    const token = this.generateMockToken(newUser.id);\n\n    return {\n      user: newUser,\n      token\n    };\n  }\n\n  private async mockLogin(request: LoginRequest): Promise<AuthResponse> {\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // For demo purposes, accept any password for demo@example.com\n    if (request.email === 'demo@example.com') {\n      const user = this.mockUsers.find(u => u.email === request.email);\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      const token = this.generateMockToken(user.id);\n      return {\n        user,\n        token\n      };\n    }\n\n    // Find user in mock database\n    const user = this.mockUsers.find(u => u.email === request.email);\n    if (!user) {\n      throw new Error('Invalid email or password');\n    }\n\n    // In a real app, you would verify the password hash here\n    // For demo purposes, we'll accept any password\n    const token = this.generateMockToken(user.id);\n    return {\n      user,\n      token\n    };\n  }\n\n  private async mockGetCurrentUser(): Promise<AuthUser | null> {\n    await new Promise(resolve => setTimeout(resolve, 300));\n    \n    // Return demo user for mock mode\n    return this.mockUsers[0];\n  }\n\n  private async mockRefreshToken(): Promise<string | null> {\n    const currentUser = await this.mockGetCurrentUser();\n    if (!currentUser) {\n      return null;\n    }\n\n    return this.generateMockToken(currentUser.id);\n  }\n\n  private generateMockToken(userId: string): string {\n    // In a real app, this would be generated by the server\n    const payload = {\n      userId,\n      iat: Math.floor(Date.now() / 1000),\n      exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60) // 24 hours\n    };\n    \n    return btoa(JSON.stringify(payload));\n  }\n\n  private isValidEmail(email: string): boolean {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  // Get auth data from localStorage (synchronous)\n  getStoredAuth(): AuthResponse | null {\n    const stored = localStorage.getItem(this.STORAGE_KEY);\n    if (!stored) {\n      return null;\n    }\n\n    try {\n      return JSON.parse(stored);\n    } catch (error) {\n      console.error('Error parsing stored auth data:', error);\n      return null;\n    }\n  }\n\n  private storeAuth(authData: AuthResponse): void {\n    localStorage.setItem(this.STORAGE_KEY, JSON.stringify(authData));\n  }\n\n  private clearAuth(): void {\n    localStorage.removeItem(this.STORAGE_KEY);\n  }\n}\n\nexport default new AuthService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}