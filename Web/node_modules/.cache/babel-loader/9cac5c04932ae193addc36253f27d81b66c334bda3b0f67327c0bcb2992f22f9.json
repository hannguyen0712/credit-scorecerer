{"ast":null,"code":"var _jsxFileName = \"/Users/hanngn/Documents/CreditScorecerer/credit-scorecerer/Web/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport AuthService from '../services/AuthService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const isAuthenticated = !!user && !!token;\n\n  // Initialize auth state on app start\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        setIsLoading(true);\n\n        // Get current user (Supabase handles session management automatically)\n        const currentUser = await AuthService.getCurrentUser();\n        if (currentUser) {\n          setUser(currentUser);\n          // For Supabase, we don't need to manually manage tokens\n          // Supabase handles this automatically\n          setToken('supabase-managed');\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n        setUser(null);\n        setToken(null);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n  const login = async request => {\n    try {\n      setIsLoading(true);\n      const response = await AuthService.login(request);\n      setUser(response.user);\n      setToken(response.token || 'supabase-managed');\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const signUp = async request => {\n    try {\n      setIsLoading(true);\n      const response = await AuthService.signUp(request);\n      setUser(response.user);\n      setToken(response.token || 'supabase-managed');\n    } catch (error) {\n      console.error('Sign up error:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      setIsLoading(true);\n      await AuthService.logout();\n      setUser(null);\n      setToken(null);\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Even if logout fails on server, clear local state\n      setUser(null);\n      setToken(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const refreshToken = async () => {\n    try {\n      const newToken = await AuthService.refreshToken();\n      if (newToken) {\n        setToken(newToken);\n      } else {\n        // Token refresh failed, logout user\n        await logout();\n      }\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      await logout();\n    }\n  };\n  const value = {\n    user,\n    token,\n    isAuthenticated,\n    isLoading,\n    login,\n    signUp,\n    logout,\n    refreshToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"mX4/AXRUN66G8j/NKXHYWKblzjI=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","AuthService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","token","setToken","isLoading","setIsLoading","isAuthenticated","initializeAuth","currentUser","getCurrentUser","error","console","login","request","response","signUp","logout","refreshToken","newToken","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/hanngn/Documents/CreditScorecerer/credit-scorecerer/Web/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { AuthUser, LoginRequest, SignUpRequest, AuthState } from '../types';\nimport AuthService from '../services/AuthService';\n\ninterface AuthContextType extends AuthState {\n  login: (request: LoginRequest) => Promise<void>;\n  signUp: (request: SignUpRequest) => Promise<void>;\n  logout: () => Promise<void>;\n  refreshToken: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<AuthUser | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const isAuthenticated = !!user && !!token;\n\n  // Initialize auth state on app start\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        setIsLoading(true);\n        \n        // Get current user (Supabase handles session management automatically)\n        const currentUser = await AuthService.getCurrentUser();\n        if (currentUser) {\n          setUser(currentUser);\n          // For Supabase, we don't need to manually manage tokens\n          // Supabase handles this automatically\n          setToken('supabase-managed');\n        }\n      } catch (error) {\n        console.error('Error initializing auth:', error);\n        setUser(null);\n        setToken(null);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    initializeAuth();\n  }, []);\n\n  const login = async (request: LoginRequest): Promise<void> => {\n    try {\n      setIsLoading(true);\n      const response = await AuthService.login(request);\n      setUser(response.user);\n      setToken(response.token || 'supabase-managed');\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const signUp = async (request: SignUpRequest): Promise<void> => {\n    try {\n      setIsLoading(true);\n      const response = await AuthService.signUp(request);\n      setUser(response.user);\n      setToken(response.token || 'supabase-managed');\n    } catch (error) {\n      console.error('Sign up error:', error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = async (): Promise<void> => {\n    try {\n      setIsLoading(true);\n      await AuthService.logout();\n      setUser(null);\n      setToken(null);\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Even if logout fails on server, clear local state\n      setUser(null);\n      setToken(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const refreshToken = async (): Promise<void> => {\n    try {\n      const newToken = await AuthService.refreshToken();\n      if (newToken) {\n        setToken(newToken);\n      } else {\n        // Token refresh failed, logout user\n        await logout();\n      }\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      await logout();\n    }\n  };\n\n  const value: AuthContextType = {\n    user,\n    token,\n    isAuthenticated,\n    isLoading,\n    login,\n    signUp,\n    logout,\n    refreshToken\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}